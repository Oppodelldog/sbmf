// this code has been generated by sbmf, do not change it manually
// @formatter:off
using System;
using System.Collections;
using System.IO;

namespace Messages
{
    using MyInteger32 = System.Int32;
    using MyInteger64 = System.Int64;
    using MyString = System.String;
    using MyBoolean = System.Boolean;
    using MyFloat32 = System.Single;
    using MyFloat64 = System.Double;
    public enum TestEnum {

        TestEnumValue1 = 1,

        TestEnumValue2 = 2,
    }
    public struct Alias {
        public MyInteger32 MI32;
        public MyInteger64 MI64;
        public MyFloat32 MF32;
        public MyFloat64 MF64;
        public MyString MS;
        public TestEnum E;
        public MyBoolean B;
    }
    public struct AliasLists {
        public MyInteger32[] MI32;
        public MyInteger64[] MI64;
        public MyFloat32[] MF32;
        public MyFloat64[] MF64;
        public MyString[] MS;
        public TestEnum[] E;
        public MyBoolean[] B;
    }
    public struct Foobar {
        public Alias A;
        public Primitive P;
        public AliasLists AL;
        public PrimitiveLists PL;
    }
    public struct Primitive {
        public int I32;
        public long I64;
        public float F32;
        public double F64;
        public string S;
        public System.Boolean B;
    }
    public struct PrimitiveLists {
        public int[] I32;
        public long[] I64;
        public float[] F32;
        public double[] F64;
        public string[] S;
        public bool[] B;
    }
}

namespace Messages.Extensions
{
    public static class BinaryExtensions
    {
        public static byte[] MarshalBinary(this Alias o)
        {
            MemoryStream ms = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(ms);
            writer.Write(o.MI32);
            writer.Write(o.MI64);
            writer.Write(o.MF32);
            writer.Write(o.MF64);
            WriteString(writer, o.MS);
            writer.Write((int)o.E);
            writer.Write(o.B);
            writer.Flush();

            return ms.ToArray();
        }

        public static void UnmarshalBinary(ref this Alias o,BinaryReader reader)
        {
            o.MI32 = reader.ReadInt32();
            o.MI64 = reader.ReadInt64();
            o.MF32 = reader.ReadSingle();
            o.MF64 = reader.ReadDouble();
            o.MS = ReadString(reader);
            o.E = (TestEnum)reader.ReadInt32();
            o.B = reader.ReadBoolean();
        }
        public static byte[] MarshalBinary(this AliasLists o)
        {
            MemoryStream ms = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(ms);
            writer.Write(o.MI32,o.MI32.Length);
            writer.Write(o.MI64,o.MI64.Length);
            writer.Write(o.MF32,o.MF32.Length);
            writer.Write(o.MF64,o.MF64.Length);
            writer.Write(o.MS,o.MS.Length);
            writer.Write(o.E,o.E.Length);
            writer.Write(o.B,o.B.Length);
            writer.Flush();

            return ms.ToArray();
        }

        public static void UnmarshalBinary(ref this AliasLists o,BinaryReader reader)
        {
            o.MI32 = reader.ReadList<int>();
            o.MI64 = reader.ReadList<long>();
            o.MF32 = reader.ReadList<float>();
            o.MF64 = reader.ReadList<double>();
            o.MS = reader.ReadList<string>();
            o.E = reader.ReadList<TestEnum>();
            o.B = reader.ReadList<System.Boolean>();
        }
        public static byte[] MarshalBinary(this Foobar o)
        {
            MemoryStream ms = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(ms);
            writer.Write(o.A.MarshalBinary());
            writer.Write(o.P.MarshalBinary());
            writer.Write(o.AL.MarshalBinary());
            writer.Write(o.PL.MarshalBinary());
            writer.Flush();

            return ms.ToArray();
        }

        public static void UnmarshalBinary(ref this Foobar o,BinaryReader reader)
        {
            o.A.UnmarshalBinary(reader);
            o.P.UnmarshalBinary(reader);
            o.AL.UnmarshalBinary(reader);
            o.PL.UnmarshalBinary(reader);
        }
        public static byte[] MarshalBinary(this Primitive o)
        {
            MemoryStream ms = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(ms);
            writer.Write(o.I32);
            writer.Write(o.I64);
            writer.Write(o.F32);
            writer.Write(o.F64);
            WriteString(writer, o.S);
            writer.Write(o.B);
            writer.Flush();

            return ms.ToArray();
        }

        public static void UnmarshalBinary(ref this Primitive o,BinaryReader reader)
        {
            o.I32 = reader.ReadInt32();
            o.I64 = reader.ReadInt64();
            o.F32 = reader.ReadSingle();
            o.F64 = reader.ReadDouble();
            o.S = ReadString(reader);
            o.B = reader.ReadBoolean();
        }
        public static byte[] MarshalBinary(this PrimitiveLists o)
        {
            MemoryStream ms = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(ms);
            writer.Write(o.I32,o.I32.Length);
            writer.Write(o.I64,o.I64.Length);
            writer.Write(o.F32,o.F32.Length);
            writer.Write(o.F64,o.F64.Length);
            writer.Write(o.S,o.S.Length);
            writer.Write(o.B,o.B.Length);
            writer.Flush();

            return ms.ToArray();
        }

        public static void UnmarshalBinary(ref this PrimitiveLists o,BinaryReader reader)
        {
            o.I32 = reader.ReadList<int>();
            o.I64 = reader.ReadList<long>();
            o.F32 = reader.ReadList<float>();
            o.F64 = reader.ReadList<double>();
            o.S = reader.ReadList<string>();
            o.B = reader.ReadList<System.Boolean>();
        }


    public static void Write(this BinaryWriter writer, IEnumerable list, int length)
    {
        writer.Write(length);
        foreach (var item in list)
        {
            if(item is int)
            {
                writer.Write((int)item);
            }
            else if(item is long)
            {
                writer.Write((long)item);
            }
            else if(item is float)
            {
                writer.Write((float)item);
            }
            else if(item is double)
            {
                writer.Write((double)item);
            }
            else if(item is string)
            {
                WriteString(writer, (string)item);
            }
            else if(item is bool)
            {
                writer.Write((bool)item);
            }
            else if(item is TestEnum)
            {
                writer.Write((int)item);
            }
            else
            {
                throw new Exception("Unknown type");
            }
        }
    }


    public static T[] ReadList<T>(this BinaryReader reader)
    {
        var length = reader.ReadInt32();
        var result = new T[length];

        for (var i = 0; i < length; i++)
        {
            if(typeof(T) == typeof(int))
            {
                result[i] = (T)(object)reader.ReadInt32();
            }
            else if (typeof(T) == typeof(long))
            {
                result[i] = (T)(object)reader.ReadInt64();
            }
            else if (typeof(T) == typeof(float))
            {
                result[i] = (T)(object)reader.ReadSingle();
            }
            else if (typeof(T) == typeof(double))
            {
                result[i] = (T)(object)reader.ReadDouble();
            }
            else if (typeof(T) == typeof(string))
            {
                result[i] = (T)(object)ReadString(reader);
            }
            else if (typeof(T) == typeof(bool))
            {
                result[i] = (T)(object)reader.ReadBoolean();
            }
            else if (typeof(T) == typeof(TestEnum))
            {
                result[i] = (T)(object)reader.ReadInt32();
            }
            else
            {
                throw new Exception("Unknown type");
            }
        }

            return result;
    }

    public static void WriteString(BinaryWriter writer, string value)
    {
        writer.Write(value.Length);
        writer.Write(value.ToCharArray());
    }

    public static string ReadString(BinaryReader reader)
    {
        return new string(reader.ReadChars(reader.ReadInt32()));
    }

    }
}
